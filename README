AIPY (Astronomical Interferometry in PYthon)

This package collects together tools for radio astronomical interferometry.  In
addition to pure-python implementations of phasing, calibration, imaging, and
deconvolution code, this package provides interfaces to MIRIAD (a Fortran
interferometry package) and routines from SciPy for fitting and interpolation.

BEFORE YOU INSTALL
    This is a *nix package.  It is unknown whether it installs on MacOS, and
    it pretty certainly doesn't install on Windows.  You also need to have
    python >= 2.4.

    For python, you'll need to have the following packages:
    numpy-1.0.4 (bleeding edge)
        > svn co http://svn.scipy.org/svn/numpy/trunk numpy
        and then proceed as normal with its installation.
    matplotlib (aka pylab, most recent >= 90.0)
    matplotlib-basemap-0.9.X

TO INSTALL AS ROOT
    > sudo python setup.py install

TO INSTALL AS USER
    This is more complicated.  You'll first install to a directory of your
    choice:
    > python setup.py install --install-lib <module_dir> \
        --install-scripts <scripts_dir>
    This puts the python module in <module_dir>, and the command-line scripts
    in <scripts_dir>.  The next thing is to tell python where to look for
    the python module.  This is done by setting the PYTHONPATH variable to
    point to <module_dir>.  In bash, this looks like:
    > export PYTHONPATH=<module_dir>
    However, you'll have to type this every time you open a terminal.  To
    avoid this, add the export line to the .bashrc file in your home dir.

COMMAND-LINE SCRIPTS
    Unless you installed as user, these will be in /usr/bin.  For more info
    use the "-h" option with any of these commands:

    apply_bp.py:        Apply the bandpass variable to UV data and write a 
                        new file.  Also linearizes quantization gain.
    combine_freqs.py:   Average multiple channels together (reducing the total
                        number of channels).
    compress_uv.py:     Applies "tar -cjf" to UV files, compressing them.
    fit_dly_pos.py:     Fit antenna positions and delays by phasing on to
                        multiple sources.  Still under development.
    lst:                Prints out local sidereal time + julian date
    phs2src.py:         Phase a zenith data set to a source, writing the
                        result out to a new UV file.
    plot_uv.py:         A very flexible tool for plotting data from a UV file.
    rm_mdl.py:          Subtract a sky/system model from the measured data.
                        Outputs to a new UV file.
    xrfi.py:            Generate a new UV file with RFI flagged.  Currently
                        only works with the "-s" option.
    xtalk.py:           Generate a new UV file with crosstalk removed, and
                        with signals at "non-sky" delays filtered.
    
Enjoy,
Aaron Parsons

-----------------------------------------------------------------------------

PACKAGE INFO FOR DEVELOPERS
    The subpackages "interpolate", "optimize", "special" were copied in from 
    scipy-0.6.0.  If these ever need to be updated, just download scipy
    source and copy scipy/scipy/interpolate,optimize,special into aipy.
    Unfortunately, then you need to crawl through the code and replace all
    "scipy" references with "aipy".

    The miriad source code (aipy/miriad/mirsrc) was included from 
    MIRIAD-4.0.5.  To update, download miriad source and copy $MIR/src/subs/* 
    and $MIR/src/inc/* into aipy/miriad/mirsrc.  Not all files are used, but 
    include them all anyway.

    PyEphem is included in the directory aipy/pyephem.  Current version is
    pyephem-3.7.2a1.  However, setup.py is manually edited to enable it to
    be built as a subpackage.  If updating code, don't clobber setup.py.  
    Just copy rest in.  Also added a __init__.py to pyephem.
